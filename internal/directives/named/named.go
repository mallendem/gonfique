package named

import (
	"fmt"
	"go/ast"
	"go/token"
	"reflect"

	"github.com/ufukty/gonfique/internal/bundle"
)

func replaceInlineTypeDefWithIdent(holder ast.Node, ident *ast.Ident) error {
	switch h := holder.(type) {
	case *ast.Field:
		h.Type = ident
	case *ast.ArrayType:
		h.Elt = ident
	default:
		return fmt.Errorf("unrecognized holder type: %s", reflect.TypeOf(holder).String())
	}
	return nil
}

func replaceAutogenerated(b *bundle.Bundle) error {
	for _, kp := range b.NeedsToBeNamed {
		tn, ok := b.GeneratedTypenames[kp]
		if !ok {
			return fmt.Errorf("no typename found for keypath: %s", kp)
		}
		holder, ok := b.Holders[kp]
		if !ok {
			return fmt.Errorf("no holder found for keypath: %s", kp)
		}
		err := replaceInlineTypeDefWithIdent(holder, tn.Ident())
		if err != nil {
			return fmt.Errorf("replacing inline type definition with the reference of named type declaration: %w", err)
		}
	}
	return nil
}

func replaceUserSpecified(b *bundle.Bundle) error {
	for wckp, dirs := range *b.Df {
		if dirs.Named != "" {
			matches := b.Expansions[wckp]
			for _, match := range matches {
				kp, ok := b.Keypaths[match]
				if !ok {
					return fmt.Errorf("no typename found for keypath: %s", kp)
				}
				tn, ok := b.GeneratedTypenames[kp]
				if !ok {
					return fmt.Errorf("no typename found for keypath: %s", kp)
				}
				err := replaceInlineTypeDefWithIdent(match, tn.Ident())
				if err != nil {
					return fmt.Errorf("replacing inline type definition with the reference of named type declaration: %w", err)
				}
			}
		}
	}
	return nil
}

func Implement(b *bundle.Bundle) error {
	if b.Holders == nil {
		return fmt.Errorf("holders is needed")
	}
	err := replaceAutogenerated(b)
	if err != nil {
		return fmt.Errorf("replacing auto generated types: %w", err)
	}
	err = replaceUserSpecified(b)
	if err != nil {
		return fmt.Errorf("replacing named types: %w", err)
	}
	for _, kp := range b.NeedsToBeNamed {
		expr := b.TypeExprs[kp]
		b.Named = append(b.Named, &ast.GenDecl{
			Tok: token.TYPE,
			Specs: []ast.Spec{&ast.TypeSpec{
				Name: b.GeneratedTypenames[kp].Ident(),
				Type: expr,
			}},
		})
	}
	return nil
}
